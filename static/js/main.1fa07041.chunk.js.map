{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/NavBar/NavBar.tsx","helpers/randomizeArray.ts","features/wordsSlice.ts","helpers/startWords.ts","components/Dictionary/Dictionary.tsx","components/AddAWord/AddAWord.tsx","features/scoreSlice.ts","components/History/History.tsx","components/WordCard/WordCard.tsx","components/WordsTest/WordsTest.tsx","components/Result/Result.tsx","App.tsx","app/store.ts","index.tsx"],"names":["PageNavLink","props","to","text","isEnd","end","className","isActive","classNames","NavBar","randomizeArray","array","sort","Math","random","wordsSlice","createSlice","name","initialState","words","minTestWords","reducers","setWords","state","action","payload","selectWords","selectMinToTest","actions","startWords","original","translation","Dictionary","dispatch","useDispatch","useSelector","length","map","word","index","uuid4","type","onClick","AddAWord","useState","setOriginal","setTranslation","canSubmit","useMemo","onSubmit","event","preventDefault","newWord","htmlFor","value","onChange","target","placeholder","required","autoComplete","id","disabled","scoreSlice","score","scoreHistory","setScore","setScoreHistory","selectScore","selectScoreHistory","History","reduce","a","b","toFixed","WordCard","currentWord","handleChooseAnswer","wrongWords","currentTranslation","amount","filteredWords","filter","oldWord","slice","selectRandomWords","answers","shuffledArray","Array","_","WordsTest","currentItemNumber","setCurrentItemNumber","isStarted","setIsStarted","navigate","useNavigate","canPlay","wordsPool","useEffect","correct","chosen","isAdd","prev","Result","App","path","element","replace","store","configureStore","reducer","wordsReducer","scoreReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fa07041.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n  isEnd?: boolean\n};\n\nexport const PageNavLink: React.FC<Props> = (props) => {\n  const { to, text, isEnd } = props;\n\n  return (\n    <NavLink\n      to={to}\n      end={isEnd}\n      className={({ isActive }) => classNames(\n        'navbar__item',\n        {\n          'navbar__item--active': isActive,\n        },\n      )}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import './NavBar.scss';\nimport React from 'react';\nimport { PageNavLink } from '../PageNavLink/PageNavLink';\n\nexport const NavBar: React.FC = () => {\n  return (\n    <nav className=\"navbar page__section\">\n      <ul className=\"navbar__list\">\n        <PageNavLink to=\"/\" text=\"Dictionary\" isEnd />\n        <PageNavLink to=\"/addAWord\" text=\"Add a Word\" />\n        <PageNavLink to=\"/test\" text=\"Check yourself\" />\n        <PageNavLink to=\"/history\" text=\"History\" />\n      </ul>\n    </nav>\n  );\n};\n","export const randomizeArray = <T>(array: T[]): T[] => {\n  return [...array].sort(() => 0.5 - Math.random());\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../app/store';\nimport { word } from '../types/word';\nimport { randomizeArray } from '../helpers/randomizeArray';\n\nexport type WordsState = {\n  words: word[],\n  minTestWords: number,\n};\n\nconst initialState: WordsState = {\n  words: [],\n  minTestWords: 10,\n};\n\nexport const wordsSlice = createSlice({\n  name: 'words',\n  initialState,\n  reducers: {\n    setWords: (state, action: PayloadAction<word[]>) => {\n      state.words = action.payload;\n    },\n  },\n});\n\nexport const selectWords = (state: RootState) => state.words.words;\nexport const selectMinToTest = (state: RootState) => state.words.minTestWords;\nexport const selectRandomWords = (\n  state: RootState,\n  currentTranslation: string,\n  amount: number,\n): word[] => {\n  const { words } = state.words;\n\n  const filteredWords = words\n    .filter(oldWord => oldWord.translation !== currentTranslation);\n\n  return randomizeArray(filteredWords).slice(0, amount);\n};\n\nexport const {\n  setWords,\n} = wordsSlice.actions;\n\nexport default wordsSlice.reducer;\n","export const startWords = [\n  {\n    original: 'cat',\n    translation: 'кіт',\n  },\n  {\n    original: 'dog',\n    translation: 'пес',\n  },\n  {\n    original: 'cow',\n    translation: 'корова',\n  },\n  {\n    original: 'pig',\n    translation: 'свиня',\n  },\n  {\n    original: 'wood',\n    translation: 'деревина',\n  },\n  {\n    original: 'water',\n    translation: 'вода',\n  },\n  {\n    original: 'air',\n    translation: 'повітря',\n  },\n  {\n    original: 'fire',\n    translation: 'вогонь',\n  },\n  {\n    original: 'glass',\n    translation: 'скло',\n  },\n  {\n    original: 'rabbit',\n    translation: 'кролик',\n  },\n];\n","import './Dictionary.scss';\nimport React from 'react';\nimport { v4 as uuid4 } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWords, setWords } from '../../features/wordsSlice';\nimport { startWords } from '../../helpers/startWords';\n\nexport const Dictionary: React.FC = () => {\n  const dispatch = useDispatch();\n  const words = useSelector(selectWords);\n\n  const handleAutofill = () => dispatch(setWords(startWords));\n\n  return (\n    <div className=\"dictionary\">\n      <h1 className=\"dictionary__title\">\n        {words.length > 0 ? ('Your words') : 'Add a few words'}\n      </h1>\n\n      {words.length > 0 ? (\n        <div className=\"dictionary__words\">\n          <table className=\"dictionary__table\">\n            <thead>\n              <tr>\n                <th>№</th>\n                <th>Word</th>\n                <th>Translation</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {words.map((word, index) => (\n                <tr key={uuid4()}>\n                  <td>{index + 1}</td>\n                  <td>{word.original}</td>\n                  <td>{word.translation}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"dictionary__button button\"\n          onClick={handleAutofill}\n        >\n          Autofill\n        </button>\n      )}\n    </div>\n  );\n};\n","import './AddAWord.scss';\nimport React, { FormEvent, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWords, setWords } from '../../features/wordsSlice';\nimport { word } from '../../types/word';\n\nexport const AddAWord: React.FC = () => {\n  const [original, setOriginal] = useState('');\n  const [translation, setTranslation] = useState('');\n\n  const dispatch = useDispatch();\n  const words = useSelector(selectWords);\n\n  const clearFields = () => {\n    setOriginal('');\n    setTranslation('');\n  };\n\n  const handleSubmitForm = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newWord: word = {\n      original,\n      translation,\n    };\n\n    dispatch(setWords([...words, newWord]));\n\n    clearFields();\n  };\n\n  const canSubmit = useMemo(() => {\n    return original.length > 0 && translation.length > 0;\n  }, [original, translation]);\n\n  return (\n    <div className=\"addAWord\">\n      <form\n        className=\"addAWord__form\"\n        onSubmit={handleSubmitForm}\n      >\n        <label\n          className=\"addAWord__label\"\n          htmlFor=\"word\"\n        >\n          <p className=\"addAWord__label-text\">Word</p>\n          <input\n            type=\"text\"\n            className=\"addAWord__input\"\n            value={original}\n            onChange={(event) => setOriginal(event.target.value)}\n            placeholder=\"word\"\n            required\n            autoComplete=\"off\"\n            id=\"word\"\n          />\n        </label>\n\n        <label\n          className=\"addAWord__label\"\n          htmlFor=\"translation\"\n        >\n          <p className=\"addAWord__label-text\">Translation</p>\n          <input\n            type=\"text\"\n            className=\"addAWord__input\"\n            value={translation}\n            onChange={(event) => setTranslation(event.target.value)}\n            placeholder=\"translation\"\n            required\n            autoComplete=\"off\"\n            id=\"translation\"\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"addAWord__button button\"\n          disabled={!canSubmit}\n        >\n          Add a Word\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../app/store';\n\nexport type WordsState = {\n  score: number,\n  scoreHistory: number[],\n};\n\nconst initialState: WordsState = {\n  score: 0,\n  scoreHistory: [],\n};\n\nexport const scoreSlice = createSlice({\n  name: 'score',\n  initialState,\n  reducers: {\n    setScore: (state, action: PayloadAction<number>) => {\n      state.score = action.payload;\n    },\n    setScoreHistory: (state, action: PayloadAction<number[]>) => {\n      state.scoreHistory = action.payload;\n    },\n  },\n});\n\nexport const selectScore = (state: RootState) => state.score.score;\nexport const selectScoreHistory = (state: RootState) => state.score.scoreHistory;\n\nexport const {\n  setScore,\n  setScoreHistory,\n} = scoreSlice.actions;\n\nexport default scoreSlice.reducer;\n","import './History.scss';\nimport React from 'react';\nimport { v4 as uuid4 } from 'uuid';\nimport { useSelector } from 'react-redux';\nimport { selectScoreHistory } from '../../features/scoreSlice';\nimport { selectMinToTest } from '../../features/wordsSlice';\n\nexport const History: React.FC = () => {\n  const scoreHistory = useSelector(selectScoreHistory);\n  const minTestWords = useSelector(selectMinToTest);\n\n  return (\n    <div className=\"history\">\n      {scoreHistory.length > 0 ? (\n        <>\n          <div className=\"history__words\">\n            <table className=\"history__table\">\n              <thead>\n                <tr>\n                  <th>№</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {scoreHistory.map((score, index) => (\n                  <tr key={uuid4()}>\n                    <td>{index + 1}</td>\n                    <td>\n                      {(score / minTestWords) * 100}\n                      %\n                    </td>\n                  </tr>\n                ))}\n                <tr>\n                  <td>Average</td>\n                  <td>\n                    {((scoreHistory.reduce((a, b) => a + b) * 10) / scoreHistory.length).toFixed(2)}\n                    %\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </>\n      ) : (\n        <p className=\"history__error\">Your history is empty</p>\n      )}\n    </div>\n  );\n};\n","import './WordCard.scss';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuid4 } from 'uuid';\nimport { selectRandomWords } from '../../features/wordsSlice';\nimport { randomizeArray } from '../../helpers/randomizeArray';\nimport { RootState } from '../../app/store';\nimport { word } from '../../types/word';\n\ntype Props = {\n  currentWord: word,\n  handleChooseAnswer: (correct: string, chosen: string) => void;\n};\n\nexport const WordCard: React.FC<Props> = (props) => {\n  const { currentWord, handleChooseAnswer } = props;\n\n  const wrongWords = useSelector((state: RootState) => {\n    return selectRandomWords(state, currentWord.translation, 3);\n  }).map(oldWord => oldWord.translation);\n\n  const answers: string[] = [\n    currentWord.translation,\n    ...wrongWords,\n  ];\n\n  const shuffledArray = randomizeArray(answers);\n\n  return (\n    <div className=\"wordCard\">\n      <div className=\"wordCard__title\">\n        {currentWord.original}\n      </div>\n\n      <div className=\"wordCard__answers\">\n        {[...Array(4)].map((_, index) => (\n          <button\n            className=\"wordCard__answer\"\n            type=\"button\"\n            onClick={() => handleChooseAnswer(currentWord.translation, shuffledArray[index])}\n            key={uuid4()}\n          >\n            {shuffledArray[index]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import './WordsTest.scss';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuid4 } from 'uuid';\nimport { selectMinToTest, selectWords } from '../../features/wordsSlice';\nimport { WordCard } from '../WordCard/WordCard';\nimport { word } from '../../types/word';\nimport { randomizeArray } from '../../helpers/randomizeArray';\nimport {\n  selectScore,\n  selectScoreHistory,\n  setScore,\n  setScoreHistory,\n} from '../../features/scoreSlice';\n\nexport const WordsTest: React.FC = () => {\n  const [currentItemNumber, setCurrentItemNumber] = useState(0);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const scoreHistory = useSelector(selectScoreHistory);\n  const minTestWords = useSelector(selectMinToTest);\n  const score = useSelector(selectScore);\n  const words = useSelector(selectWords);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const canPlay = useMemo(() => words.length >= minTestWords, [words]);\n  const getRandomWords = (amount: number) => randomizeArray<word>(words).slice(0, amount);\n  const handleStartClick = () => setIsStarted(true);\n  const handleChooseAnswer = (correct: string, chosen: string) => {\n    let isAdd = false;\n\n    if (chosen === correct) {\n      dispatch(setScore(score + 1));\n\n      isAdd = true;\n    }\n\n    setCurrentItemNumber((prev) => prev + 1);\n\n    if (currentItemNumber + 1 === minTestWords) {\n      dispatch(setScoreHistory([...scoreHistory, isAdd ? score + 1 : score]));\n      navigate('/result');\n    }\n  };\n\n  const wordsPool: word[] = useMemo(() => getRandomWords(minTestWords), []);\n\n  useEffect(() => {\n    dispatch(setScore(0));\n  }, []);\n\n  return (\n    <div className=\"wordsTest\">\n      {!canPlay ? (\n        <h2 className=\"wordsTest__title wordsTest__title--error\">\n          The dictionary must contain at least\n          {` ${minTestWords} words`}\n        </h2>\n      ) : (\n        <>\n          {!isStarted && (\n            <h2 className=\"wordsTest__title wordsTest__title--access\">\n              Check yourself!\n            </h2>\n          )}\n        </>\n      )}\n\n      {!isStarted ? (\n        <button\n          className=\"wordsTest__button button\"\n          type=\"button\"\n          onClick={handleStartClick}\n          disabled={!canPlay}\n        >\n          Repeat the words\n        </button>\n      ) : (\n        <>\n          {currentItemNumber !== minTestWords && (\n            <div className=\"wordsTest__test\">\n              <div className=\"wordsTest__counter\">\n                {currentItemNumber + 1}\n                /\n                {minTestWords}\n              </div>\n              <WordCard\n                currentWord={wordsPool[currentItemNumber]}\n                handleChooseAnswer={handleChooseAnswer}\n                key={uuid4()}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import './Result.scss';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectScore } from '../../features/scoreSlice';\nimport { selectMinToTest } from '../../features/wordsSlice';\n\nexport const Result: React.FC = () => {\n  const score = useSelector(selectScore);\n  const minTestWords = useSelector(selectMinToTest);\n\n  return (\n    <div className=\"result\">\n      <h2 className=\"result__title\">\n        Your result is\n      </h2>\n\n      <div className=\"result__value\">\n        {(score / minTestWords) * 100}\n        %\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { NavBar } from './components/NavBar/NavBar';\nimport { Dictionary } from './components/Dictionary/Dictionary';\nimport { AddAWord } from './components/AddAWord/AddAWord';\nimport { History } from './components/History/History';\nimport { WordsTest } from './components/WordsTest/WordsTest';\nimport { Result } from './components/Result/Result';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <NavBar />\n\n      <main className=\"main\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<Dictionary />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"addAWord\" element={<AddAWord />} />\n            <Route path=\"test\" element={<WordsTest />} />\n            <Route path=\"result\" element={<Result />} />\n            <Route path=\"history\" element={<History />} />\n\n            <Route path=\"*\" element={<h1>Error :(</h1>} />\n          </Routes>\n        </div>\n      </main>\n    </>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport wordsReducer from '../features/wordsSlice';\nimport scoreReducer from '../features/scoreSlice';\n\nexport const store = configureStore({\n  reducer: {\n    words: wordsReducer,\n    score: scoreReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}